@using ASP_P22.Services.Random
@* Точка інжекція - запит до контейнера на референс *@
@inject IRandomService randomService
@{
    ViewData["Title"] = "IoC";
    IRandomService _randomService = (IRandomService)ViewData["_randomService"]!;
}

<div class="text-center">
    <h1 class="display-4">Інверсія управління</h1>
</div>
<p>
    <b>Не плутати!</b>
</p>
<ul>
    <li>
        <b>DIP</b> - Dependency Inversion Principle (SOLID) - 
        принцип, згідно з яким типізація залежностей має бути 
        максимально абстрактна (не створювати залежності від класів,
        створювати від інтерфейсів)
    </li>
    <li>
        <b>IoC</b> - Inversion of Control - шаблон проєктування (pattern)
        архітектурна схема, згідно з якою управління життєвим циклом 
        об'єктів покладається на окремий модуль (контейнер служб)
    </li>
    <li>
        <b>DI</b> - Dependency Injection - механізм впровадження референсів
        до об'єктів, які від них залежать
    </li>
</ul>
<pre>
    a) [hash, zip]  - у кожного об'єкта 
       [hash, zip]    своя реалізація класу (свій instance)

               container
    b) [?,?] &rarr; | hash | &rarr; [hash, zip]   - у кожного об'єкта 
       [?,?] &rarr; | zip  | &rarr; [hash, zip]     посилання на однакові реалізації
</pre>

<p>
    Робота з інверсією управління складається з наступних етапів:
</p>
<ul>
    <li>
        Створюємо сервіс - клас, що відповідає за оброблення даних.
        При створенні користуємось DIP, тобто спочатку створюємо інтерфейс,
        а потім клас, що його імплементує.
    </li>
    <li>
        Реєструємо сервіс (відповідність інтерфейсу та класу) у 
        контейнері залежностей (див. Program.cs)
    </li>
    <li>
        Інжектуємо сервіс (утворюємо точки інжекції)<br/>
        У Razor - за допомогою ключового слова <code>&commat;inject</code><br/>
        У контролері - через конструктор
    </li>
    <li>
        Тестуємо - викликаємо роботу служби 
        <br />
        <code>&commat;randomService.FileName() = @randomService.FileName()</code>
        <br/>
        <code>&commat;_randomService.FileName() = @_randomService.FileName()</code>
    </li>
</ul>
<h2>Scope - область існування</h2>
<p>
    При реєстрації служби необхідно зазначити її життєвий цикл (Scope). 
    Це керує поведінкою при інжекції служби у нову точку - створювати 
    новий об'єкт чи використати попередньо створений.
</p>
<p>
    Хеш-код об'єкта з контролера: @_randomService.GetHashCode() <br/>
    Хеш-код об'єкта з представлення: @randomService.GetHashCode() <br/>
</p>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Команда реєстрації</th><th>При новій інжекції</th><th>При оновлені сторінки</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>AddSingleton</td><td>Не змінюється</td><td>Не змінюється</td></tr>
        <tr><td>AddScoped</td><td>Не змінюється</td><td>Змінюється</td></tr>
        <tr><td>AddTransient</td><td>Змінюється</td><td>Змінюється</td></tr>
    </tbody>
</table>

<p>
    hash123 = @ViewData["hash123"]
</p>

Д.З. Створити сервіс часу, який дозволяє 
а) повернути поточну мітку часу як timestamp (long)
б) повернути поточну мітку часу як SQL-формат (YYYY-MM-DD HH:MM:SS)
в) розпарсити дату, передану в SQL-форматі -- повернути поточну мітку часу як timestamp (long)
Вивести результати роботи на веб-сторінку, додати скріншоти до репозиторію